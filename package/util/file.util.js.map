{"version":3,"sources":["util/file.util.ts"],"names":[],"mappings":"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","file":"file.util.js","sourcesContent":["\nimport { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { PromiseUtil } from \"./promise.util\";\nimport * as fs from \"fs\";\n\n/* 异步操作文件的封装工具类 */\n@Injectable()\nexport class FileUtil {\n\n    constructor(\n        @Inject(PromiseUtil) private readonly promiseUtil: PromiseUtil\n    ) {}\n\n    async write(path: string, buffer: Buffer): Promise<void> {\n        await this.promiseUtil.do((resolver, reject) => {\n            fs.writeFile(path, buffer, (err) => {\n                if (err) {\n                    reject(new HttpException(\"文件写入磁盘错误:\" + err.toString(), 406));\n                }\n                resolver();\n            });\n        });\n    }\n\n    async read(path: string): Promise<Buffer> {\n        let result: Buffer;\n        await this.promiseUtil.do((resolver, reject) => {\n            fs.readFile(path, (err, buffer) => {\n                if (err) {\n                    reject(new HttpException(\"读取文件错误:\" + err.toString(), 406));\n                }\n                result = buffer;\n                resolver();\n            });\n        });\n        return result;\n    }\n\n    async delete(path: string): Promise<void> {\n        await this.promiseUtil.do((resolver, reject) => {\n            fs.unlink(path, (err) => {\n                if (err) {\n                    reject(new HttpException(\"文件删除错误:\" + err.toString(), 406));\n                }\n                resolver();\n            });\n        });\n    }\n\n    async deleteIfExist(path: string): Promise<void> {\n        if (fs.existsSync(path)) {\n            await this.promiseUtil.do((resolver, reject) => {\n                fs.unlink(path, (err) => {\n                    if (err) {\n                        reject(new HttpException(\"文件删除错误:\" + err.toString(), 406));\n                    }\n                    resolver();\n                });\n            });\n        }\n    }\n\n    // 获取文件状态，一般只有一个size能言用\n    async size(path: string): Promise<number> {\n        if (fs.existsSync(path)) {\n            let size;\n            await this.promiseUtil.do((resolver, reject) => {\n                fs.stat(path, (err, stats) => {\n                    if (err) {\n                        reject(new HttpException(\"获取文件状态错误:\" + err.toString(), 406));\n                    }\n                    size = stats.size;\n                    resolver();\n                });\n            });\n            return size;\n        } else {\n            return undefined;\n        }\n    }\n\n    exist(path: string): boolean {\n        return fs.existsSync(path);\n    }\n\n    async mkdir(path: string): Promise<void> {\n        await this.promiseUtil.do((resolver, reject) => {\n            fs.mkdir(path, (err) => {\n                if (err) {\n                    reject(new HttpException(\"创建目录错误:\" + err.toString(), 406));\n                }\n                resolver();\n            });\n        });\n    }\n}\n"]}