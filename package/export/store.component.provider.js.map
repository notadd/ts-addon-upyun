{"version":3,"sources":["export/store.component.provider.ts"],"names":[],"mappings":"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","file":"store.component.provider.js","sourcesContent":["import * as crypto from \"crypto\";\nimport * as os from \"os\";\nimport { Repository } from \"typeorm\";\nimport { HttpException, Inject } from \"@nestjs/common\";\nimport { ImagePostProcessInfo, ImagePreProcessInfo } from \"../interface/file/image.process.info\";\nimport { Audio } from \"../model/audio.entity\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport { Document } from \"../model/document.entity\";\nimport { File } from \"../model/file.entity\";\nimport { Image } from \"../model/image.entity\";\nimport { Video } from \"../model/video.entity\";\nimport { FileService } from \"../service/file.service\";\nimport { AuthUtil } from \"../util/auth.util\";\nimport { FileUtil } from \"../util/file.util\";\nimport { KindUtil } from \"../util/kind.util\";\nimport { ProcessStringUtil } from \"../util/process.string.util\";\nimport { RestfulUtil } from \"../util/restful.util\";\n\nexport class StoreComponent {\n\n    constructor(\n        @Inject(KindUtil) private readonly kindUtil: KindUtil,\n        @Inject(FileUtil) private readonly fileUtil: FileUtil,\n        @Inject(AuthUtil) private readonly authUtil: AuthUtil,\n        @Inject(RestfulUtil) private readonly resufulUtil: RestfulUtil,\n        @Inject(FileService) private readonly fileService: FileService,\n        @Inject(ProcessStringUtil) private readonly processStringUtil: ProcessStringUtil,\n        @Inject(\"UpyunModule.ImageRepository\") private readonly imageRepository: Repository<Image>,\n        @Inject(\"UpyunModule.BucketRepository\") private readonly bucketRepository: Repository<Bucket>\n    ) {\n    }\n\n    async delete(bucketName: string, name: string, type: string): Promise<void> {\n        // 验证参数\n        if (!bucketName || !name || !type) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: Bucket = await this.bucketRepository.findOne({ name: bucketName });\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        // 根据文件种类，查找、删除数据库\n        let file: Image | Audio | Video | Document | File;\n        const kind = this.kindUtil.getKind(type);\n        if (kind === \"image\") {\n            file = await this.imageRepository.findOne({ name, bucketId: bucket.id });\n            if (!file) {\n                throw new HttpException(\"文件\" + name + \"不存在于数据库中\", 404);\n            }\n            await this.imageRepository.deleteById(file.id);\n        } else {\n            // 其他类型暂不支持\n        }\n        await this.resufulUtil.deleteFile(bucket, file);\n        return;\n    }\n\n    async upload(\n        bucketName: string,\n        rawName: string,\n        base64: string,\n        imagePreProcessInfo: ImagePreProcessInfo,\n    ): Promise<{ bucketName: string, name: string, type: string }> {\n\n        if (!bucketName || !rawName || !base64) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n\n        const bucket: Bucket = await this.bucketRepository.createQueryBuilder(\"bucket\")\n            .leftJoinAndSelect(\"bucket.imageConfig\", \"imageConfig\")\n            .where(\"bucket.name = :name\", { name: bucketName })\n            .getOne();\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        const buffer: Buffer = Buffer.from(base64, \"base64\");\n        const md5 = crypto.createHash(\"md5\").update(buffer).digest(\"hex\");\n        const name = md5 + \"_\" + (+new Date());\n        const tempPath = os.tmpdir + \"/\" + rawName;\n        await this.fileUtil.write(tempPath, buffer);\n        let file: Image | Audio | Video | Document | File;\n        const uploadFile = { path: tempPath };\n        let type: string = rawName.substring(rawName.lastIndexOf(\".\") + 1);\n        const kind: string = this.kindUtil.getKind(type);\n        try {\n            if (kind === \"image\") {\n                if (bucket.imageConfig.format === \"webp_damage\" || bucket.imageConfig.format === \"webp_undamage\") {\n                    type = \"webp\";\n                }\n                file = this.imageRepository.create({\n                    bucket,\n                    rawName,\n                    name,\n                    type,\n                    md5,\n                    status: \"post\"\n                });\n                const { width, height, frames } = await this.resufulUtil.uploadFile(bucket, file, uploadFile, imagePreProcessInfo);\n                const { fileSize, fileMd5 } = await this.resufulUtil.getFileInfo(bucket, file);\n                file = this.imageRepository.create({\n                    bucket,\n                    rawName,\n                    name,\n                    type,\n                    width,\n                    height,\n                    frames,\n                    size: fileSize,\n                    md5: fileMd5,\n                    status: \"post\"\n                });\n                await this.imageRepository.save(file);\n            } else {\n                // 其他类型暂不支持\n            }\n        } catch (err) {\n            throw err;\n        } finally {\n            // 如果中间过程抛出了异常，要保证删除临时图片\n            await this.fileUtil.deleteIfExist(tempPath);\n        }\n\n        return { bucketName, name, type };\n    }\n\n    async getUrl(req: any, bucketName: string, name: string, type: string, imagePostProcessInfo: ImagePostProcessInfo): Promise<string> {\n        // 验证参数\n        if (!bucketName || !name || !type) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: Bucket = await this.bucketRepository.createQueryBuilder(\"bucket\")\n            .leftJoinAndSelect(\"bucket.imageConfig\", \"imageConfig\")\n            .where(\"bucket.name = :name\", { name: bucketName })\n            .getOne();\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        let url: string;\n        // 根据文件种类，查找、删除数据库\n        let file: Image | Audio | Video | Document | File;\n        const kind = this.kindUtil.getKind(type);\n        if (kind === \"image\") {\n            file = await this.imageRepository.findOne({ name, bucketId: bucket.id });\n            if (!file) {\n                throw new HttpException(\"指定图片\" + name + \".\" + type + \"不存在\", 404);\n            }\n        } else {\n            // 其他类型暂不支持\n        }\n        url = await this.fileService.makeUrl(bucket, file, { imagePostProcessInfo }, kind);\n        return url;\n    }\n}\n\nexport const StoreComponentProvider = {\n    provide: \"StoreComponentToken\",\n    useFactory: (\n        kindUtil: KindUtil,\n        fileUtil: FileUtil,\n        authUtil: AuthUtil,\n        restfulUtil: RestfulUtil,\n        fileService: FileService,\n        processStringUtil: ProcessStringUtil,\n        imageRepository: Repository<Image>,\n        bucketRepository: Repository<Bucket>,\n    ) => {\n        return new StoreComponent(\n            kindUtil,\n            fileUtil,\n            authUtil,\n            restfulUtil,\n            fileService,\n            processStringUtil,\n            imageRepository,\n            bucketRepository,\n        );\n    },\n    inject: [\n        KindUtil,\n        FileUtil,\n        AuthUtil,\n        RestfulUtil,\n        FileService,\n        ProcessStringUtil,\n        \"ImageRepository\",\n        \"BucketRepository\",\n    ],\n};\n"]}