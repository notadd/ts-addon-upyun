{"version":3,"sources":["util/file.util.ts"],"names":[],"mappings":"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","file":"file.util.js","sourcesContent":["\nimport { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport * as fs from \"fs\";\n\n/* 异步操作文件的封装工具类 */\n@Injectable()\nexport class FileUtil {\n\n    constructor() { }\n\n    async write(path: string, buffer: Buffer): Promise<void> {\n        await new Promise((resolver, reject) => {\n            fs.writeFile(path, buffer, (err) => {\n                if (err) {\n                    reject(new HttpException(\"文件写入磁盘错误:\" + err.toString(), 406));\n                    return;\n                }\n                resolver();\n                return;\n            });\n        });\n    }\n\n    async read(path: string): Promise<Buffer> {\n        const buffer: any = await new Promise((resolver, reject) => {\n            fs.readFile(path, (err, buffer: Buffer) => {\n                if (err) {\n                    reject(new HttpException(\"读取文件错误:\" + err.toString(), 406));\n                    return;\n                }\n                resolver(buffer);\n                return;\n            });\n        });\n        return buffer;\n    }\n\n    async delete(path: string): Promise<void> {\n        await new Promise((resolver, reject) => {\n            fs.unlink(path, (err) => {\n                if (err) {\n                    reject(new HttpException(\"文件删除错误:\" + err.toString(), 406));\n                    return;\n                }\n                resolver();\n                return;\n            });\n        });\n    }\n\n    async deleteIfExist(path: string): Promise<void> {\n        if (fs.existsSync(path)) {\n            await new Promise((resolver, reject) => {\n                fs.unlink(path, (err) => {\n                    if (err) {\n                        reject(new HttpException(\"文件删除错误:\" + err.toString(), 406));\n                        return;\n                    }\n                    resolver();\n                    return;\n                });\n            });\n        }\n    }\n\n    // 获取文件状态，一般只有一个size能言用\n    async size(path: string): Promise<number> {\n        if (fs.existsSync(path)) {\n            const size: any = await new Promise((resolver, reject) => {\n                fs.stat(path, (err, stats: fs.Stats) => {\n                    if (err) {\n                        reject(new HttpException(\"获取文件状态错误:\" + err.toString(), 406));\n                        return;\n                    }\n                    resolver(stats.size);\n                    return;\n                });\n            });\n            return size;\n        } else {\n            return undefined;\n        }\n    }\n\n    exist(path: string): boolean {\n        return fs.existsSync(path);\n    }\n\n    async mkdir(path: string): Promise<void> {\n        await new Promise((resolver, reject) => {\n            fs.mkdir(path, (err) => {\n                if (err) {\n                    reject(new HttpException(\"创建目录错误:\" + err.toString(), 406));\n                    return;\n                }\n                resolver();\n                return;\n            });\n        });\n    }\n}\n"]}