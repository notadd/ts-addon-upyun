{"version":3,"sources":["util/auth.util.ts"],"names":[],"mappings":"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","file":"auth.util.js","sourcesContent":["\nimport { Injectable } from \"@nestjs/common\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport * as crypto from \"crypto\";\n\n/* 验证签名服务组件，包含获取头信息签名、请求体签名、token、回调通知验签等功能 */\n@Injectable()\nexport class AuthUtil {\n\n    constructor() {\n    }\n\n    /* 获取请求头信息中签名，restfulAPI与form回调通知签名使用这种签名方式\n      @Param data：响应信息\n      @Param bucket：空间配置\n      @Param url：请求url，即不包含域名、查询字符串之前的部分，对于回调通知为/image/notify\n      @Param date：加上超时之后的GMT格式字符串\n      @Param method：请求方法，回调通知为异步时为post\n      @Param contentMd5：请求体md5值\n    */\n    async getHeaderAuth(bucket: Bucket, method: string, url: string, date: string, md5: string): Promise<string> {\n        let ori = \"\";\n        ori += method.toUpperCase() + \"&\";\n        ori += url + \"&\";\n        ori += date;\n        if (md5 && md5 !== \"\") {\n            ori += \"&\" + md5;\n        }\n        const signTemp = crypto.createHmac(\"sha1\", bucket.password).update(ori).digest().toString(\"base64\");\n        return \"UPYUN \" + bucket.operator + \":\" + signTemp;\n    }\n\n    /* 获取请求体信息签名，form表单上传采用这种签名方式\n       @Param data：响应信息\n       @Param bucket：空间配置\n       @Param method：请求方法\n       @Param policy：上传参数对象\n    */\n    async getBodyAuth(bucket: Bucket, method: string, policy: any): Promise<string> {\n        let ori = \"\";\n        ori += method.toUpperCase() + \"&\";\n        ori += \"/\" + policy.bucket + \"&\";\n        ori += policy.date + \"&\";\n        // 拼接上传参数json字符串的base64编码\n        ori += Buffer.from(JSON.stringify(policy)).toString(\"base64\");\n        if (policy[ \"content-md5\" ] && policy[ \"content-md5\" ] !== \"\") {\n            ori += \"&\" + policy[ \"content-md5\" ];\n        }\n        const signTemp = crypto.createHmac(\"sha1\", bucket.password).update(ori).digest(\"base64\");\n        return \"UPYUN \" + bucket.operator + \":\" + signTemp;\n    }\n\n    /* 获取访问私有空间图片token\n       @Param url：访问图片的url,不包含域名\n       @Param bucket：空间配置\n    */\n    getToken(bucket: Bucket, url: string) {\n        const expireTime = Math.floor((+new Date()) / 1000) + bucket.tokenExpire;\n        const str = bucket.tokenSecretKey + \"&\" + expireTime + \"&\" + url;\n        const md5 = crypto.createHash(\"md5\").update(str).digest(\"hex\");\n        // 获取中间8位\n        const middle8 = md5.substring(12, 20);\n        return middle8 + expireTime;\n    }\n\n    /* 验证回调签名\n       @Param auth：回调响应头信息中签名字符串\n       @Param bucket：空间配置\n       @Param url：回调通知url\n       @Param method：回调通知方法，异步情况下问post\n       @Param body：回调通知请求体对象\n       @Param date：回调请求头信息中date字符串\n       @Param contentMd5：回调请求头信息中md5值\n    */\n    async notifyVerify(auth: string, bucket: Bucket, method: string, url: string, date: string, contentMd5: string, body: any): Promise<boolean> {\n        let rawBody = \"\";\n        const keys = Object.keys(body);\n        keys.forEach((key, index) => {\n            if (body[ key ] && !isNaN(parseInt(body[ key ])) && key !== \"task_ids\") {\n                body[ key ] = parseInt(body[ key ]);\n            }\n            rawBody += key + \"=\" + encodeURIComponent(body[ key ]);\n            if (index < keys.length - 1) {\n                rawBody += \"&\";\n            }\n        });\n        const genarateMd5 = crypto.createHash(\"md5\").update(rawBody).digest(\"hex\");\n        if (genarateMd5 !== contentMd5) {\n            return false;\n        }\n        // 生成签名\n        let ori = \"\";\n        ori += method.toUpperCase() + \"&\";\n        ori += url + \"&\";\n        ori += date + \"&\";\n        ori += contentMd5;\n        const localSign = crypto.createHmac(\"sha1\", bucket.password).update(ori).digest(\"base64\");\n        // 获取响应头信息中签名字符串\n        const remoteSign = auth.substr(auth.lastIndexOf(\":\") + 1);\n        if (localSign === remoteSign) {\n            return true;\n        }\n        return false;\n    }\n\n    /* 验证回调签名\n       @Param auth：回调响应头信息中签名字符串\n       @Param bucket：空间配置\n       @Param url：回调通知url\n       @Param method：回调通知方法，异步情况下问post\n       @Param body：回调通知请求体对象\n    */\n    async taskNotifyVerify(auth: string, bucket: Bucket, method: string, url: string, date: string, contentMd5: string, body: any): Promise<boolean> {\n        const genarateMd5 = crypto.createHash(\"md5\").update(JSON.stringify(body)).digest(\"hex\");\n        if (contentMd5 !== genarateMd5) {\n            return false;\n        }\n        // 生成签名\n        let ori = \"\";\n        ori += method.toUpperCase() + \"&\";\n        ori += url + \"&\";\n        ori += date + \"&\";\n        ori += contentMd5;\n        const localSign = crypto.createHmac(\"sha1\", bucket.password).update(ori).digest(\"base64\");\n        // 获取响应头信息中签名字符串\n        const remoteSign = auth.substr(auth.lastIndexOf(\":\") + 1);\n        if (localSign === remoteSign) {\n            return true;\n        }\n        return false;\n    }\n\n}\n"]}