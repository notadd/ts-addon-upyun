{"version":3,"sources":["controller/file.controller.ts"],"names":[],"mappings":"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","file":"file.controller.js","sourcesContent":["\nimport { Body, Controller, Headers, HttpException, Inject, Post, Request, Response, UseFilters } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport * as  path from \"path\";\nimport { Repository } from \"typeorm\";\nimport { UpyunExceptionFilter } from \"../exception/upyun.exception.filter\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport { File } from \"../model/file.entity\";\nimport { Image } from \"../model/image.entity\";\nimport { FileService } from \"../service/file.service\";\nimport { AuthUtil } from \"../util/auth.util\";\nimport { KindUtil } from \"../util/kind.util\";\nimport { RestfulUtil } from \"../util/restful.util\";\n\n/*文件控制器、异步回调通知\n*/\n@Controller(\"upyun/file\")\n@UseFilters(new UpyunExceptionFilter())\nexport class FileController {\n\n    constructor(\n        @Inject(AuthUtil) private readonly authUtil: AuthUtil,\n        @Inject(KindUtil) private readonly kindUtil: KindUtil,\n        @Inject(RestfulUtil) private readonly restfulUtil: RestfulUtil,\n        @Inject(FileService) private readonly fileService: FileService,\n        @InjectRepository(File) private readonly fileRepository: Repository<File>,\n        @InjectRepository(Image) private readonly imageRepository: Repository<Image>,\n        @InjectRepository(Bucket) private readonly bucketRepository: Repository<Bucket>) {\n    }\n\n    /* 异步回调通知接口，接受两种请求，默认所有文件都会进行预处理，所有每个上传请求会接收到两个回调请求，一个是原图的，一个是预处理结果\n       application/x-www-form-urlencoded：即原图的上传回调，包含了原图的保存信息，其中没有空间名，需要从ext-param中获取空间名，原图文件名并未在数据库中保存，直接删除即可\n       application/json：                 异步预处理上传回调 ，根据文件名更新数据库\n    */\n    @Post(\"notify\")\n    async asyncNotify(@Body() body, @Request() req, @Headers() headers, @Response() res): Promise<any> {\n        const contentType = headers[ \"content-type\" ];\n        const contentMd5 = headers[ \"content-md5\" ];\n        const auth = headers.authorization;\n        const date = headers.date;\n        // 接收到默认MIME类型，说明是上传回调\n        if (contentType === \"application/x-www-form-urlencoded\") {\n            const code = +body.code;\n            // 上传不成功时，要返回200,提示云存储不再发送回调请求\n            if (code !== 200) {\n                throw new HttpException(\"上传失败,返回200告诉又拍云不要再发送回调信息\", 200);\n            }\n            // 解析出原图文件名\n            const name = path.parse(body.url).name;\n            // 文件扩展名，不包含.\n            const type = path.parse(body.url).ext.substr(1);\n            const kind = this.kindUtil.getKind(type);\n            // 从扩展参数中获取空间名\n            const bucketName = body[ \"ext-param\" ];\n            // 查找指定空间\n            const bucket: Bucket = await this.bucketRepository.findOne({ name: bucketName });\n            if (!bucket) {\n                throw new HttpException(\"空间不存在，说明是内部错误,返回200告诉又拍云不要再发送回调信息\", 200);\n            }\n            // 验签获取结果\n            const pass = await this.authUtil.notifyVerify(auth, bucket, \"POST\", \"/upyun/file/notify\", date, contentMd5, body);\n            // 验签不成功，要返回400,提示云存储继续发送回调请求\n            if (!pass) {\n                throw new HttpException(\"验签失败,返回400告诉又拍云继续发送回调信息\", 400);\n            }\n            if (kind === \"image\") {\n                const image = new Image();\n                image.name = name;\n                image.type = type;\n                await this.restfulUtil.deleteFile(bucket, image);\n            } else {\n                // 暂不支持\n            }\n        }\n        // 如果请求MIME为json类型，说吗为异步预处理回调信息，只有图片保存格式不是原图时采用这种方式\n        else if (contentType === \"application/json\") {\n            const code = body.status_code;\n            // 预处理不成功时，要返回200,提示云存储不再发送回调请求\n            if (code !== 200) {\n                throw new HttpException(\"预处理失败,返回200告诉又拍云不要再发送回调信息\", 200);\n            }\n            // 响应体中空间名\n            const bucketName = body.bucket_name;\n            // 解析出文件名，根据它查找数据库保存文件\n            const name = path.parse(body.imginfo.path).name;\n            // 文件扩展名，不包含.，不是原图时为webp\n            const type = path.parse(body.imginfo.path).ext.substr(1);\n            const kind = this.kindUtil.getKind(type);\n            // 查找指定空间\n            const bucket: Bucket = await this.bucketRepository.findOne({ name: bucketName });\n            // 验签获取结果\n            const pass = await this.authUtil.taskNotifyVerify(auth, bucket, \"POST\", \"/upyun/file/notify\", date, contentMd5, body);\n            // 验签不成功，要返回400,提示云存储继续发送回调请求\n            if (!pass) {\n                throw new HttpException(\"验签失败,返回400告诉又拍云继续发送回调信息\", 400);\n            }\n            await this.fileService.postSaveTask(bucket, name, body, kind);\n        }\n        res.sendStatus(200);\n        res.end();\n        return;\n    }\n}\n"]}