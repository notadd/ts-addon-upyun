{"version":3,"sources":["resolver/file.resolver.ts"],"names":[],"mappings":"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","file":"file.resolver.js","sourcesContent":["\nimport { HttpException, Inject, UseInterceptors } from \"@nestjs/common\";\nimport { Mutation, Query, Resolver } from \"@nestjs/graphql\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport { Request } from \"express\";\nimport { Repository } from \"typeorm\";\nimport { ExceptionInterceptor } from \"../interceptor/exception.interceptor\";\nimport { Data } from \"../interface/data\";\nimport { AllBody } from \"../interface/file/all.body\";\nimport { AllData } from \"../interface/file/all.data\";\nimport { DownloadProcessData } from \"../interface/file/download.process.data\";\nimport { FileLocationBody } from \"../interface/file/file.location.body\";\nimport { OneBody } from \"../interface/file/one.body\";\nimport { OneData } from \"../interface/file/one.data\";\nimport { Policy } from \"../interface/file/policy\";\nimport { UploadProcessBody } from \"../interface/file/upload.process.body\";\nimport { UploadProcessData } from \"../interface/file/upload.process.data\";\nimport { Audio } from \"../model/audio.entity\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport { Document } from \"../model/document.entity\";\nimport { File } from \"../model/file.entity\";\nimport { Image } from \"../model/image.entity\";\nimport { Video } from \"../model/video.entity\";\nimport { ConfigService } from \"../service/config.service\";\nimport { FileService } from \"../service/file.service\";\nimport { AuthUtil } from \"../util/auth.util\";\nimport { KindUtil } from \"../util/kind.util\";\nimport { RestfulUtil } from \"../util/restful.util\";\n\n@Resolver(\"File\")\n@UseInterceptors(ExceptionInterceptor)\nexport class FileResolver {\n\n    constructor(\n        @Inject(AuthUtil) private readonly authUtil: AuthUtil,\n        @Inject(KindUtil) private readonly kindUtil: KindUtil,\n        @Inject(RestfulUtil) private readonly restfulUtil: RestfulUtil,\n        @Inject(FileService) private readonly fileService: FileService,\n        @Inject(ConfigService) private readonly configService: ConfigService,\n        @InjectRepository(File) private readonly fileRepository: Repository<File>,\n        @InjectRepository(Image) private readonly imageRepository: Repository<Image>,\n        @InjectRepository(Bucket) private readonly bucketRepository: Repository<Bucket>) {\n    }\n\n    @Query(\"downloadProcess\")\n    async downloadProcess(req: Request, body: FileLocationBody): Promise<DownloadProcessData> {\n        const data: DownloadProcessData = {\n            code: 200,\n            message: \"下载预处理成功\",\n            method: \"get\",\n            headers: {\n                authorization: \"\",\n                date: \"\"\n            },\n            url: \"https://v0.api.upyun.com\"\n        };\n        const { bucketName, name, type } = body;\n        if (!bucketName || !name) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: Bucket = await this.bucketRepository.findOne({ name: bucketName });\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        const status = \"post\";\n        let file: File | Audio | Video | Image | Document;\n        if (this.kindUtil.isImage(type)) {\n            file = await this.imageRepository.findOne({ name, type, bucketId: bucket.id });\n        } else {\n            // 其他类型暂不支持\n        }\n        if (!file) {\n            throw new HttpException(\"指定文件\" + name + \"不存在\", 404);\n        }\n        data.url += \"/\" + bucket.name + \"/\" + bucket.directory + \"/\" + file.name + \".\" + file.type;\n        data.headers.date = new Date(+new Date() + bucket.requestExpire * 1000).toUTCString();\n        data.headers.authorization = await this.authUtil.getHeaderAuth(bucket, \"GET\", data.url.replace(\"https://v0.api.upyun.com\", \"\"), data.headers.date, \"\");\n        return data;\n    }\n\n    @Mutation(\"uploadProcess\")\n    async uploadProcess(req: Request, body: UploadProcessBody): Promise<UploadProcessData> {\n        const data: UploadProcessData = {\n            code: 200,\n            message: \"上传预处理成功\",\n            url: \"https://v0.api.upyun.com\",\n            method: \"post\",\n            baseUrl: \"\",\n            form: {\n                policy: \"\",\n                authorization: \"\"\n            }\n        };\n        const { bucketName, md5, contentName } = body;\n        if (!bucketName || !md5 || !contentName) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        if (md5.length !== 32) {\n            throw new HttpException(\"md5参数不正确\", 400);\n        }\n        // 查询空间配置，关联查询图片、音频、视频配置，处理文件需要这些信息\n        const bucket: Bucket = await this.bucketRepository.createQueryBuilder(\"bucket\")\n            .leftJoinAndSelect(\"bucket.imageConfig\", \"imageConfig\")\n            .leftJoinAndSelect(\"bucket.audioConfig\", \"audioConfig\")\n            .leftJoinAndSelect(\"bucket.videoConfig\", \"videoConfig\")\n            .where(\"bucket.name = :name\", { name: bucketName })\n            .getOne();\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        data.baseUrl = bucket.baseUrl;\n        // 预保存图片,获取保存的图片，图片名为预处理图片名，会设置到policy的apps中去\n        const image = await this.fileService.preSaveFile(bucket, body);\n        // 上传policy字段\n        const policy: Policy = {\n            // 空间名\n            \"bucket\": \"\",\n            // 文件保存路径，包括目录、文件名、扩展名\n            \"save-key\": \"\",\n            // 请求过期事件\n            \"expiration\": undefined,\n            \"date\": \"\",\n            \"content-md5\": md5,\n            // 异步回调通知路径，图片异步预处理回调也是这个接口\n            \"notify-url\": req.protocol + \"://\" + req.get(\"host\") + \"/upyun/file/notify\",\n            // 图片生存期限默认为180天\n            \"x-upyun-meta-ttl\": 180,\n            // 扩展参数，包含了空间名\n            \"ext-param\": \"\"\n        };\n        // 获取后台配置，创建上传参数，返回文件种类、以及文件所属目录\n        await this.fileService.makePolicy(data, policy, bucket, body, image);\n        return data;\n    }\n\n    /* 获取单个文件url方法 ，从后台获取\n      @Param bucketName：空间名\n      @Param name：       文件名，不包括扩展名\n      @Param type:        文件类型\n      @Param imagePostProcessInfo 文件后处理信息，获取url做图的字符串\n      @Return data.code：状态码，200为成功，其他为错误\n              data.message：响应信息\n              data.url：访问文件的全部url，包括域名、目录、文件名、扩展名、token、文件密钥、处理字符串\n   */\n    @Query(\"one\")\n    async getFile(req: Request, body: OneBody): Promise<OneData> {\n        // 验证参数存在\n        const { bucketName, name, type } = body;\n        if (!bucketName || !name || !type) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: Bucket = await this.bucketRepository.createQueryBuilder(\"bucket\")\n            .leftJoinAndSelect(\"bucket.imageConfig\", \"imageConfig\")\n            .leftJoinAndSelect(\"bucket.audioConfig\", \"audioConfig\")\n            .leftJoinAndSelect(\"bucket.videoConfig\", \"videoConfig\")\n            .where(\"bucket.name = :name\", { name: bucketName })\n            .getOne();\n        if (!bucket) {\n            throw new HttpException(\"指定空间\" + bucketName + \"不存在\", 401);\n        }\n        // 根据种类获取不同url\n        const kind = this.kindUtil.getKind(type);\n        let file: File | Audio | Video | Image | Document;\n        // 处理图片类型\n        if (kind === \"image\") {\n            file = await this.imageRepository.findOne({ name, bucketId: bucket.id });\n            if (!file) {\n                throw new HttpException(\"指定图片不存在\", 404);\n            }\n        } else {\n            // 暂不支持\n        }\n        // 所有文件调用统一的拼接Url方法\n        const url = await this.fileService.makeUrl(bucket, file, body, kind);\n        return { code: 200, message: \"获取指定文件访问url成功\", url };\n    }\n\n    /* 获取指定空间下文件，从后台数据库中获取\n       @Param bucketName：文件所属空间\n       @Return data.code： 状态码，200为成功，其他为错误\n              data.message：响应信息\n              data.baseUrl：访问文件的基本url\n              data.files    分页后的文件信息数组，里面添加了访问文件url信息，url不包含域名，包含了文件密钥、token\n              data.imges：   图片信息数组\n              data.audios:  音频信息数组\n              data.videos:  视频信息数组\n              data.documents: 文档信息数组\n    */\n    @Query(\"all\")\n    async files(req: Request, body: AllBody): Promise<AllData> {\n        const data: AllData = {\n            code: 200,\n            message: \"获取指定空间下所有文件成功\",\n            baseUrl: \"\",\n            files: [],\n            images: [],\n            audios: [],\n            videos: [],\n            documents: []\n        };\n        const { bucketName } = body;\n        if (!bucketName) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        await this.fileService.getAll(data, bucketName);\n        return data;\n    }\n\n    /* 文件删除接口\n       当客户端需要删除某个文件时使用，\n       @Param bucketName：文件所属空间名\n       @Param type：       文件扩展名，即文件类型\n       @Param name：       文件名\n       @Return data.code：状态码，200为成功，其他为错误\n               data.message：响应信息\n    */\n    @Mutation(\"deleteFile\")\n    async deleteFile(req: Request, body: FileLocationBody): Promise<Data> {\n        const { bucketName, type, name } = body;\n        if (!bucketName || !name || !type) {\n            throw new HttpException(\"缺少参数\", 400);\n        }\n        const bucket: Bucket = await this.bucketRepository.findOne({ name: bucketName });\n        if (!bucket) {\n            throw new HttpException(\"空间\" + bucketName + \"不存在\", 401);\n        }\n        const kind = this.kindUtil.getKind(type);\n        if (kind === \"image\") {\n            const image: Image = await this.imageRepository.findOne({ name, bucketId: bucket.id });\n            if (!image) {\n                throw new HttpException(\"文件md5=\" + name + \"不存在\", 404);\n            }\n            await this.restfulUtil.deleteFile(bucket, image);\n            await this.imageRepository.delete({ name, bucketId: bucket.id });\n        }\n        return { code: 200, message: \"删除文件成功\" };\n    }\n}\n"]}