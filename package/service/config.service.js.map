{"version":3,"sources":["service/config.service.ts"],"names":[],"mappings":"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","file":"config.service.js","sourcesContent":["\nimport { Injectable, HttpException, Inject } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport * as  crypto from \"crypto\";\nimport { Repository } from \"typeorm\";\nimport { AudioFormatConfig } from \"../interface/config/audio.format.config\";\nimport { BucketConfig } from \"../interface/config/bucket.config\";\nimport { EnableImageWatermarkConfig } from \"../interface/config/enable.image.watermark.config\";\nimport { ImageFormatConfig } from \"../interface/config/image.format.config\";\nimport { VideoFormatConfig } from \"../interface/config/video.format.config\";\nimport { AudioConfig } from \"../model/audio.config.entity\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport { Image } from \"../model/image.entity\";\nimport { ImageConfig } from \"../model/image.config.entity\";\nimport { VideoConfig } from \"../model/video.config.entity\";\nimport { FileUtil } from \"../util/file.util\";\nimport { RestfulUtil } from \"../util/restful.util\";\n\n/* 配置服务组件，包含了保存公有空间、私有空间、格式、水印等配置项的功能\n   还可以获取公有、私有配置\n*/\n@Injectable()\nexport class ConfigService {\n\n    constructor(\n        @Inject(FileUtil) private readonly fileUtil: FileUtil,\n        @Inject(RestfulUtil) private readonly restfulUtil: RestfulUtil,\n        @InjectRepository(Image) private readonly imageRepository: Repository<Image>,\n        @InjectRepository(Bucket) private readonly bucketRepository: Repository<Bucket>,\n        @InjectRepository(ImageConfig) private readonly imageConfigRepository: Repository<ImageConfig>,\n        @InjectRepository(AudioConfig) private readonly audioConfigRepository: Repository<AudioConfig>,\n        @InjectRepository(VideoConfig) private readonly videoConfigRepository: Repository<VideoConfig>\n    ) {\n    }\n\n    async saveBucketConfig(body: BucketConfig): Promise<Bucket> {\n        const id: number = body.isPublic ? 1 : 2;\n        const bucket: Bucket | undefined = await this.bucketRepository.findOne(id);\n        if (bucket) {\n            bucket.name = body.name;\n            bucket.operator = body.operator;\n            bucket.password = crypto.createHash(\"md5\").update(body.password).digest(\"hex\");\n            bucket.directory = body.directory;\n            bucket.baseUrl = body.baseUrl;\n            bucket.requestExpire = body.requestExpire;\n            if (!body.isPublic) {\n                bucket.tokenExpire = body.tokenExpire;\n                bucket.tokenSecretKey = body.tokenSecretKey;\n            }\n            try {\n                await this.bucketRepository.save(bucket);\n            } catch (err) {\n                throw new HttpException(\"空间配置更新失败\" + err.toString(), 403);\n            }\n            return bucket;\n        } else {\n            const newBucket: Bucket = this.bucketRepository.create({\n                id,\n                publicOrPrivate: body.isPublic ? \"public\" : \"private\",\n                name: body.name,\n                operator: body.operator,\n                password: crypto.createHash(\"md5\").update(body.password).digest(\"hex\"),\n                directory: body.directory,\n                baseUrl: body.baseUrl,\n                requestExpire: body.requestExpire\n            });\n            if (!body.isPublic) {\n                newBucket.tokenExpire = body.tokenExpire;\n                newBucket.tokenSecretKey = body.tokenSecretKey;\n            }\n            const audioConfig = new AudioConfig();\n            const videoConfig = new VideoConfig();\n            const imageConfig = new ImageConfig();\n            audioConfig.id = id;\n            videoConfig.id = id;\n            imageConfig.id = id;\n            newBucket.audioConfig = audioConfig;\n            newBucket.videoConfig = videoConfig;\n            newBucket.imageConfig = imageConfig;\n            try {\n                await this.bucketRepository.save(newBucket);\n            } catch (err) {\n                throw new HttpException(\"空间保存失败\" + err.toString(), 403);\n            }\n            return newBucket;\n        }\n    }\n\n    async saveImageFormatConfig(body: ImageFormatConfig): Promise<any> {\n        let { format } = body;\n        format = format.toLowerCase();\n        if (format !== \"raw\" && format !== \"webp_damage\" && format !== \"webp_undamage\") {\n            throw new HttpException(\"图片保存格式不正确\", 400);\n        }\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [\"imageConfig\"] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                buckets[i].imageConfig.format = format;\n                await this.imageConfigRepository.save(buckets[i].imageConfig);\n            }\n        } catch (err) {\n            throw new HttpException(\"图片保存格式更新失败\" + err.toString(), 403);\n        }\n        return;\n    }\n\n    async saveEnableImageWatermarkConfig(body: EnableImageWatermarkConfig): Promise<void> {\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [\"imageConfig\"] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        let watermarkEnable: number;\n        if (body.enable) {\n            watermarkEnable = 1;\n        } else {\n            watermarkEnable = 0;\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                buckets[i].imageConfig.watermarkEnable = watermarkEnable;\n                await this.imageConfigRepository.save(buckets[i].imageConfig);\n            }\n        } catch (err) {\n            throw new HttpException(\"水印启用保存失败\" + err.toString(), 403);\n        }\n    }\n\n    async saveImageWatermarkConfig(file: any, obj: any): Promise<void> {\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [\"imageConfig\"] });\n        let type = file.name.substr(file.name.lastIndexOf(\".\") + 1).toLowerCase();\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        const buffer: Buffer = await this.fileUtil.read(file.path);\n        const md5 = crypto.createHash(\"md5\").update(buffer).digest(\"hex\");\n        for (let i = 0; i < buckets.length; i++) {\n            if (buckets[i].imageConfig.format === \"webp_damage\" || buckets[i].imageConfig.format === \"webp_undamage\") {\n                type = \"webp\";\n            }\n            const image: Image = new Image();\n            // 这里有坑，如果之前使用了await bucket.images，那么这个bucket的性质会改变，即便这样关联，最后image中仍旧没有bucketId值\n            image.bucket = buckets[i];\n            image.rawName = file.name;\n            // 图片文件名为md5_时间戳\n            image.name = md5 + \"_\" + (+new Date());\n            image.type = type;\n            image.md5 = md5;\n            image.status = \"post\";\n            const { width, height, frames } = await this.restfulUtil.uploadFile(buckets[i], image, file, undefined);\n            const { fileSize, fileMd5 } = await this.restfulUtil.getFileInfo(buckets[i], image);\n            image.width = width;\n            image.height = height;\n            image.frames = frames;\n            image.size = fileSize;\n            image.md5 = fileMd5;\n            try {\n                await this.imageRepository.save(image);\n            } catch (err) {\n                throw new HttpException(\"水印图片保存失败\" + err.toString(), 403);\n            }\n            try {\n                buckets[i].imageConfig.watermarkSaveKey = \"/\" + buckets[i].directory + \"/\" + image.name + \".\" + image.type;\n                buckets[i].imageConfig.watermarkGravity = obj.gravity;\n                buckets[i].imageConfig.watermarkOpacity = obj.opacity;\n                buckets[i].imageConfig.watermarkWs = obj.ws;\n                buckets[i].imageConfig.watermarkX = obj.x;\n                buckets[i].imageConfig.watermarkY = obj.y;\n                await this.imageConfigRepository.save(buckets[i].imageConfig);\n            } catch (err) {\n                throw new HttpException(\"水印配置更新失败\" + err.toString(), 403);\n            }\n        }\n        return;\n    }\n\n    async saveAudioFormatConfig(body: AudioFormatConfig): Promise<void> {\n        let { format } = body;\n        format = format.toLowerCase();\n        if (format !== \"raw\" && format !== \"mp3\" && format !== \"aac\") {\n            throw new HttpException(\"音频保存格式不正确\", 400);\n        }\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [\"audioConfig\"] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                buckets[i].audioConfig.format = format;\n                await this.audioConfigRepository.save(buckets[i].audioConfig);\n            }\n        } catch (err) {\n            throw new HttpException(\"音频保存格式更新失败\" + err.toString(), 403);\n        }\n    }\n\n    async saveVideoFormatConfig(body: VideoFormatConfig): Promise<void> {\n        let { format, resolution } = body;\n        format = format.toLowerCase();\n        if (format !== \"raw\" && format !== \"vp9\" && format !== \"h264\" && format !== \"h265\") {\n            throw new HttpException(\"视频编码格式不正确\", 400);\n        }\n        resolution = resolution.toLowerCase();\n        if (resolution !== \"raw\" && resolution !== \"p1080\" && resolution !== \"p720\" && resolution !== \"p480\") {\n            throw new HttpException(\"视频分辨率格式不正确\", 400);\n        }\n\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [\"videoConfig\"] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                buckets[i].videoConfig.format = format;\n                buckets[i].videoConfig.resolution = resolution;\n                await this.videoConfigRepository.save(buckets[i].videoConfig);\n            }\n        } catch (err) {\n            throw new HttpException(\"视频保存格式更新失败\" + err.toString(), 403);\n        }\n        return;\n    }\n}\n"]}