{"version":3,"sources":["service/config.service.ts"],"names":[],"mappings":"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","file":"config.service.js","sourcesContent":["\nimport { Component, HttpException, Inject } from \"@nestjs/common\";\nimport { InjectRepository } from \"@nestjs/typeorm\";\nimport * as  crypto from \"crypto\";\nimport { Repository } from \"typeorm\";\nimport { AudioFormatConfig } from \"../interface/config/audio.format.config\";\nimport { BucketConfig } from \"../interface/config/bucket.config\";\nimport { EnableImageWatermarkConfig } from \"../interface/config/enable.image.watermark.config\";\nimport { ImageFormatConfig } from \"../interface/config/image.format.config\";\nimport { VideoFormatConfig } from \"../interface/config/video.format.config\";\nimport { AudioConfig } from \"../model/audio.config.entity\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport { Image } from \"../model/image.entity\";\nimport { ImageConfig } from \"../model/image.config.entity\";\nimport { VideoConfig } from \"../model/video.config.entity\";\nimport { FileUtil } from \"../util/file.util\";\nimport { RestfulUtil } from \"../util/restful.util\";\n\n/* 配置服务组件，包含了保存公有空间、私有空间、格式、水印等配置项的功能\n   还可以获取公有、私有配置\n*/\n@Component()\nexport class ConfigService {\n\n    constructor(\n        @Inject(FileUtil) private readonly fileUtil: FileUtil,\n        @Inject(RestfulUtil) private readonly restfulUtil: RestfulUtil,\n        @InjectRepository(Image) private readonly imageRepository: Repository<Image>,\n        @InjectRepository(Bucket) private readonly bucketRepository: Repository<Bucket>,\n        @InjectRepository(ImageConfig) private readonly imageConfigRepository: Repository<ImageConfig>,\n        @InjectRepository(AudioConfig) private readonly audioConfigRepository: Repository<AudioConfig>,\n        @InjectRepository(VideoConfig) private readonly videoConfigRepository: Repository<VideoConfig>\n    ) {\n    }\n\n    async saveBucketConfig(body: BucketConfig): Promise<Bucket> {\n        let exist: Bucket;\n        const newBucket: Bucket = this.bucketRepository.create({\n            name: body.name,\n            operator: body.operator,\n            password: crypto.createHash(\"md5\").update(body.password).digest(\"hex\"),\n            directory: body.directory,\n            baseUrl: body.baseUrl,\n            requestExpire: body.requestExpire\n        });\n        if (body.isPublic) {\n            exist = await this.bucketRepository.findOneById(1);\n        } else {\n            exist = await this.bucketRepository.findOneById(2);\n            newBucket.tokenExpire = body.tokenExpire;\n            newBucket.tokenSecretKey = body.tokenSecretKey;\n        }\n        if (exist) {\n            try {\n                await this.bucketRepository.updateById(exist.id, newBucket);\n            } catch (err) {\n                throw new HttpException(\"空间配置更新失败\" + err.toString(), 403);\n            }\n            return newBucket;\n        }\n        const audioConfig = new AudioConfig();\n        const videoConfig = new VideoConfig();\n        const imageConfig = new ImageConfig();\n        if (body.isPublic) {\n            newBucket.id = 1;\n            newBucket.publicOrPrivate = \"public\";\n        } else {\n            newBucket.id = 2;\n            newBucket.publicOrPrivate = \"private\";\n        }\n        audioConfig.id = newBucket.id;\n        videoConfig.id = newBucket.id;\n        imageConfig.id = newBucket.id;\n        newBucket.audioConfig = audioConfig;\n        newBucket.videoConfig = videoConfig;\n        newBucket.imageConfig = imageConfig;\n        try {\n            await this.bucketRepository.save(newBucket);\n        } catch (err) {\n            throw new HttpException(\"空间保存失败\" + err.toString(), 403);\n        }\n        return newBucket;\n    }\n\n    async saveImageFormatConfig(body: ImageFormatConfig): Promise<any> {\n        let { format } = body;\n        format = format.toLowerCase();\n        if (format !== \"raw\" && format !== \"webp_damage\" && format !== \"webp_undamage\") {\n            throw new HttpException(\"图片保存格式不正确\", 400);\n        }\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [ \"imageConfig\" ] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                await this.imageConfigRepository.updateById(buckets[ i ].imageConfig.id, { format });\n            }\n        } catch (err) {\n            throw new HttpException(\"图片保存格式更新失败\" + err.toString(), 403);\n        }\n        return;\n    }\n\n    async saveEnableImageWatermarkConfig(body: EnableImageWatermarkConfig): Promise<void> {\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [ \"imageConfig\" ] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        let watermarkEnable: number;\n        if (body.enable) {\n            watermarkEnable = 1;\n        } else {\n            watermarkEnable = 0;\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                await this.imageConfigRepository.updateById(buckets[ i ].imageConfig.id, { watermarkEnable });\n            }\n        } catch (err) {\n            throw new HttpException(\"水印启用保存失败\" + err.toString(), 403);\n        }\n    }\n\n    async saveImageWatermarkConfig(file: any, obj: any): Promise<void> {\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [ \"imageConfig\" ] });\n        let type = file.name.substr(file.name.lastIndexOf(\".\") + 1).toLowerCase();\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        const buffer: Buffer = await this.fileUtil.read(file.path);\n        const md5 = crypto.createHash(\"md5\").update(buffer).digest(\"hex\");\n        for (let i = 0; i < buckets.length; i++) {\n            if (buckets[ i ].imageConfig.format === \"webp_damage\" || buckets[ i ].imageConfig.format === \"webp_undamage\") {\n                type = \"webp\";\n            }\n            const image: Image = new Image();\n            // 这里有坑，如果之前使用了await bucket.images，那么这个bucket的性质会改变，即便这样关联，最后image中仍旧没有bucketId值\n            image.bucket = buckets[ i ];\n            image.rawName = file.name;\n            // 图片文件名为md5_时间戳\n            image.name = md5 + \"_\" + (+new Date());\n            image.type = type;\n            image.md5 = md5;\n            image.status = \"post\";\n            const { width, height, frames } = await this.restfulUtil.uploadFile(buckets[ i ], image, file, undefined);\n            const { fileSize, fileMd5 } = await this.restfulUtil.getFileInfo(buckets[ i ], image);\n            image.width = width;\n            image.height = height;\n            image.frames = frames;\n            image.size = fileSize;\n            image.md5 = fileMd5;\n            try {\n                await this.imageRepository.save(image);\n            } catch (err) {\n                throw new HttpException(\"水印图片保存失败\" + err.toString(), 403);\n            }\n            try {\n                await this.imageConfigRepository.updateById(buckets[ i ].imageConfig.id, {\n                    watermarkSaveKey: \"/\" + buckets[ i ].directory + \"/\" + image.name + \".\" + image.type,\n                    watermarkGravity: obj.gravity,\n                    watermarkOpacity: obj.opacity,\n                    watermarkWs: obj.ws,\n                    watermarkX: obj.x,\n                    watermarkY: obj.y\n                });\n            } catch (err) {\n                throw new HttpException(\"水印配置更新失败\" + err.toString(), 403);\n            }\n        }\n        return;\n    }\n\n    async saveAudioFormatConfig(body: AudioFormatConfig): Promise<void> {\n        let { format } = body;\n        format = format.toLowerCase();\n        if (format !== \"raw\" && format !== \"mp3\" && format !== \"aac\") {\n            throw new HttpException(\"音频保存格式不正确\", 400);\n        }\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [ \"audioConfig\" ] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                await this.audioConfigRepository.updateById(buckets[ i ].audioConfig.id, { format });\n            }\n        } catch (err) {\n            throw new HttpException(\"音频保存格式更新失败\" + err.toString(), 403);\n        }\n    }\n\n    async saveVideoFormatConfig(body: VideoFormatConfig): Promise<void> {\n        let { format, resolution } = body;\n        format = format.toLowerCase();\n        if (format !== \"raw\" && format !== \"vp9\" && format !== \"h264\" && format !== \"h265\") {\n            throw new HttpException(\"视频编码格式不正确\", 400);\n        }\n        resolution = resolution.toLowerCase();\n        if (resolution !== \"raw\" && resolution !== \"p1080\" && resolution !== \"p720\" && resolution !== \"p480\") {\n            throw new HttpException(\"视频分辨率格式不正确\", 400);\n        }\n\n        const buckets: Array<Bucket> = await this.bucketRepository.find({ relations: [ \"videoConfig\" ] });\n        if (buckets.length !== 2) {\n            throw new HttpException(\"空间配置不存在\", 401);\n        }\n        try {\n            for (let i = 0; i < buckets.length; i++) {\n                await this.videoConfigRepository.updateById(buckets[ i ].videoConfig.id, { format, resolution });\n            }\n        } catch (err) {\n            throw new HttpException(\"视频保存格式更新失败\" + err.toString(), 403);\n        }\n\n        return;\n    }\n}\n"]}