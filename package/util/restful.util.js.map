{"version":3,"sources":["util/restful.util.ts"],"names":[],"mappings":"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","file":"restful.util.js","sourcesContent":["\nimport { Component, HttpException, Inject } from \"@nestjs/common\";\nimport * as fs from \"fs\";\nimport * as mime from \"mime\";\nimport * as request from \"request\";\nimport { ImagePreProcessInfo } from \"../interface/file/image.process.info\";\nimport { Audio } from \"../model/audio.entity\";\nimport { Bucket } from \"../model/bucket.entity\";\nimport { Document } from \"../model/document.entity\";\nimport { File } from \"../model/file.entity\";\nimport { Image } from \"../model/image.entity\";\nimport { Video } from \"../model/video.entity\";\nimport { AuthUtil } from \"../util/auth.util\";\nimport { ProcessStringUtil } from \"./process.string.util\";\nimport { PromiseUtil } from \"./promise.util\";\n\n/* 包含了restfulAPI的各种功能\n   删除文件、创建目录、删除目录、获取文件信息、获取目录文件列表、获取服务使用量\n*/\n@Component()\nexport class RestfulUtil {\n    private readonly apihost = \"https://v0.api.upyun.com\";\n\n    constructor(\n        @Inject(AuthUtil) private readonly authUtil: AuthUtil,\n        @Inject(PromiseUtil) private readonly promiseUtil: PromiseUtil,\n        @Inject(ProcessStringUtil) private readonly processStringUtil: ProcessStringUtil\n    ) {\n    }\n\n    // 上传文件，其中文件信息来自于formidable解析得到的File对象\n    async uploadFile(bucket: Bucket, file: File | Image | Video | Audio | Document, uploadFile: any, imagePreProcessInfo: ImagePreProcessInfo): Promise<{ width: number, height: number, frames: number }> {\n        const contentMd5 = file.md5;\n        const saveKey = \"/\" + bucket.directory + \"/\" + file.name + \".\" + file.type;\n        const requestUrl = this.apihost + \"/\" + bucket.name + saveKey;\n        const url = \"/\" + bucket.name + saveKey;\n        const date: string = new Date(+new Date() + bucket.requestExpire * 1000).toUTCString();\n        const Authorization = await this.authUtil.getHeaderAuth(bucket, \"PUT\", url, date, contentMd5);\n        const format = bucket.imageConfig.format || \"raw\";\n        let xGmkerlThumb = this.processStringUtil.makeImageProcessString(bucket, imagePreProcessInfo);\n        if (format === \"raw\") {\n            xGmkerlThumb += \"/scale/100\";\n        } else if (format === \"webp_damage\") {\n            xGmkerlThumb += \"/format/webp/strip/true\";\n        } else {\n            xGmkerlThumb += \"/format/webp/lossless/true/strip/true\";\n        }\n        let height, width, frames;\n        await this.promiseUtil.do((resolve, reject) => {\n            fs.createReadStream(uploadFile.path).pipe(request.put({\n                url: requestUrl,\n                headers: {\n                    \"Content-Type\": mime.getType(uploadFile.path),\n                    \"Content-MD5\": contentMd5,\n                    Authorization,\n                    \"Date\": date,\n                    \"x-gmkerl-thumb\": xGmkerlThumb\n                }\n            }, (err, res, body) => {\n                if (err) {\n                    reject(new HttpException(\"文件上传失败,网络错误\", 402));\n                    return;\n                }\n                if (res.statusCode === 200) {\n                    width = res.headers[ \"x-upyun-width\" ];\n                    height = res.headers[ \"x-upyun-height\" ];\n                    frames = res.headers[ \"x-upyun-frames\" ];\n                    resolve();\n                    return;\n                }\n                if (body) {\n                    try {\n                        const { msg, code, id } = JSON.parse(body);\n                        reject(new HttpException(msg, code));\n                    } catch (err) {\n                        reject(new HttpException(\"响应体解析错误\", 402));\n                    }\n                } else {\n                    reject(new HttpException(\"响应体不存在\", 402));\n                }\n                return;\n            }));\n        });\n        return { width, height, frames };\n    }\n\n    /*创建指定空间里的指定目录，空间下唯一目录在配置中指定\n        @Param bucket：目录所属空间\n    */\n    async createDirectory(bucket: Bucket): Promise<void> {\n        const requestUrl = this.apihost + \"/\" + bucket.name + \"/\" + bucket.directory;\n        const url = \"/\" + bucket.name + \"/\" + bucket.directory;\n        const date: string = new Date(+new Date() + bucket.requestExpire * 1000).toUTCString();\n        const Authorization = await this.authUtil.getHeaderAuth(bucket, \"POST\", url, date, undefined);\n        await this.promiseUtil.do((resolve, reject) => {\n            request.post({\n                    url: requestUrl,\n                    headers: {\n                        Authorization,\n                        Date: date,\n                        folder: true\n                    }\n                },\n                (err, res, body) => {\n                    if (err) {\n                        reject(new HttpException(\"目录创建失败，网络错误\", 402));\n                        return;\n                    }\n                    if (res.statusCode === 200) {\n                        resolve();\n                        return;\n                    }\n                    if (body) {\n                        try {\n                            const { msg, code, id } = JSON.parse(body);\n                            reject(new HttpException(msg, code));\n                        } catch (err) {\n                            reject(new HttpException(\"响应体解析错误\", 402));\n                        }\n                    } else {\n                        reject(new HttpException(\"响应体不存在\", 402));\n                    }\n                    return;\n                });\n        });\n        return;\n    }\n\n    /* 删除指定空间指定文件\n       @Param bucket：文件所属空间\n       @Param file：文件对象\n     */\n    async deleteFile(bucket: Bucket, file: File | Image | Video | Audio | Document): Promise<void> {\n        const savekey = \"/\" + bucket.directory + \"/\" + file.name + \".\" + file.type;\n        const requestUrl = this.apihost + \"/\" + bucket.name + savekey;\n        const url = \"/\" + bucket.name + savekey;\n        const date: string = new Date(+new Date() + bucket.requestExpire * 1000).toUTCString();\n        const Authorization = await this.authUtil.getHeaderAuth(bucket, \"DELETE\", url, date, \"\");\n        await this.promiseUtil.do((resolve, reject) => {\n            request.delete({\n                url: requestUrl,\n                headers: {\n                    Authorization,\n                    Date: date\n                }\n            }, (err, res, body) => {\n                if (err) {\n                    reject(new HttpException(\"删除文件失败\", 402));\n                    return;\n                }\n                if (res.statusCode === 200) {\n                    resolve();\n                    return;\n                }\n                if (body) {\n                    try {\n                        const { msg, code, id } = JSON.parse(body);\n                        reject(new HttpException(msg, code));\n                    } catch (err) {\n                        reject(new HttpException(\"响应体解析错误\", 402));\n                    }\n                } else {\n                    reject(new HttpException(\"响应体不存在\", 402));\n                }\n                return;\n            });\n        });\n        return;\n    }\n\n    /* 获取指定文件的保存信息\n     */\n    async getFileInfo(bucket: Bucket, file: File | Image | Video | Audio | Document): Promise<{ fileSize: number, fileDate: any, fileMd5: string }> {\n        const savekey = \"/\" + bucket.directory + \"/\" + file.name + \".\" + file.type;\n        const requestUrl = this.apihost + \"/\" + bucket.name + savekey;\n        const url = \"/\" + bucket.name + savekey;\n        const date: string = new Date(+new Date() + bucket.requestExpire * 1000).toUTCString();\n        const Authorization = await this.authUtil.getHeaderAuth(bucket, \"HEAD\", url, date, \"\");\n        let fileSize, fileDate, fileMd5;\n        await this.promiseUtil.do((resolve, reject) => {\n            request.head({\n                url: requestUrl,\n                headers: {\n                    Authorization,\n                    Date: date\n                }\n            }, (err, res, body) => {\n                if (err) {\n                    reject(new HttpException(\"获取文件信息失败\", 402));\n                    return;\n                }\n                if (res.statusCode === 200) {\n                    fileSize = +res.headers[ \"x-upyun-file-size\" ];\n                    fileDate = +res.headers[ \"x-upyun-file-date\" ];\n                    fileMd5 = res.headers[ \"content-md5\" ];\n                    resolve();\n                    return;\n                }\n                if (body) {\n                    try {\n                        const { msg, code, id } = JSON.parse(body);\n                        reject(new HttpException(msg, code));\n                    } catch (err) {\n                        reject(new HttpException(\"响应体解析错误\", 402));\n                    }\n                } else {\n                    reject(new HttpException(\"响应体不存在\", 402));\n                }\n                return;\n            });\n        });\n        return { fileSize, fileDate, fileMd5 };\n    }\n\n    /* 获取指定空间下文件\\目录列表\n       响应头信息中指明了分页位置\n       响应体为换行符、空格拼接的字符串，列分别为\n       文件名/目录名  类型(N表示文件、F标志目录) 大小 最后修改时间\n     */\n    async getFileList(bucket: Bucket): Promise<any> {\n        const saveKey = \"/\" + bucket.directory;\n        const requestUrl = this.apihost + \"/\" + bucket.name + saveKey;\n        const url = \"/\" + bucket.name + saveKey;\n        const date: string = new Date(+new Date() + bucket.requestExpire * 1000).toUTCString();\n        const Authorization = await this.authUtil.getHeaderAuth(bucket, \"GET\", url, date, \"\");\n        let info;\n        await this.promiseUtil.do((resolve, reject) => {\n            request.get({\n                url: requestUrl,\n                headers: {\n                    Authorization,\n                    Date: date\n                }\n            }, (err, res, body) => {\n                if (err) {\n                    reject(new HttpException(\"获取文件信息失败\", 402));\n                    return;\n                }\n                if (res.statusCode === 200) {\n                    info = body.split(\"\\n\").map((value, index, raw) => {\n                        const temp = value.split(\"\\t\");\n                        return {\n                            name: temp[ 0 ],\n                            isDirectory: (temp[ 1 ] === \"N\" ? false : true),\n                            size: parseInt(temp[ 2 ]),\n                            timestamp: parseInt(temp[ 3 ])\n                        };\n                    });\n                    resolve();\n                    return;\n                }\n                reject(new HttpException(\"获取文件列表失败\", 402));\n                return;\n            });\n        });\n\n        return info;\n    }\n}\n"]}